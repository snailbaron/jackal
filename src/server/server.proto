syntax = "proto3";

package proto;

enum MoveType {
    MOVE_TYPE_RUN = 0;
    MOVE_TYPE_DRINK_RUM = 1;
    MOVE_TYPE_NONE = 2;
}

message Point {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
}

message Pirate {
    bool is_alive = 1;
    bool has_money = 2;
    MoveType move_type = 3;
    Point place = 4;
    int32 player_id = 5;
}

enum CellType {
	CELL_TYPE_UNSPECIFIED = 0;

	CELL_TYPE_ARROW = 255;
	CELL_TYPE_HORSE = 256;
	CELL_TYPE_ICE = 257;
	CELL_TYPE_CANNIBAL = 258;
	CELL_TYPE_FORT = 259;
	CELL_TYPE_NATIVE_WOMAN = 260;
	CELL_TYPE_PITFALL = 261;
	CELL_TYPE_RUM = 262;
	CELL_TYPE_CROCODILE = 263;
	CELL_TYPE_DIFFICULT_TERRAIN = 264;
	CELL_TYPE_TREASURE = 265;
	CELL_TYPE_CANNON_UP = 266;
	CELL_TYPE_CANNON_LEFT = 267;
	CELL_TYPE_CANNON_RIGHT = 268;
	CELL_TYPE_CANNON_DOWN = 269;
	CELL_TYPE_BALOON = 270;
	CELL_TYPE_AIRPLANE = 271;
	CELL_TYPE_GRASS = 272;
	CELL_TYPE_CLOSED = 300;
	CELL_TYPE_WATER = 400;
	CELL_TYPE_ROOT = 500;
};

message Cell {
	CellType type = 1;
	int32 money = 2;
	repeated int32 pirate = 3;
	int32 depth = 4;
}

message TimeState {
	int32 day = 1;
	int32 step = 2;
}

message GameState {
    repeated Pirate pirates = 1;
	repeated Cell map = 2;
	repeated Point ships = 3;
	TimeState current_time = 4;
}

enum ResponseType {
	RESPONSE_TYPE_ILLEGAL_TURN = 0;
	RESPONSE_TYPE_OK = 1;
	RESPONSE_TYPE_WAIT_TURN = 2;
}

message PirateId {
	int32 id = 1;
}

message MakeTurnRequest {
	int32 pirate_id = 1;
	Point target_point = 2;
}

message Empty {
}

service JackalService {
    rpc GetGameState(Empty) returns (GameState) {}
	rpc GetLegalSteps(PirateId) returns (stream Point) {}
	rpc MakeTurn(MakeTurnRequest) returns (Empty) {}
	rpc UseMoney(PirateId) returns (Empty) {}
}